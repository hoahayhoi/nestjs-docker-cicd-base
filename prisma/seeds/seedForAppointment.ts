// import { PrismaClient } from '@prisma/client';

// const prisma = new PrismaClient();

// export async function seedForAppointment() {
//   console.log('üîÑ Resetting database...');

//   await prisma.appointment.deleteMany();
//   console.log('‚úÖ Database reset successfully!');
//   console.log('üå± Seeding Appointments...');

//   // L·∫•y danh s√°ch chi ti·∫øt ƒë∆°n h√†ng ch∆∞a c√≥ l·ªãch h·∫πn
//   const orderDetailsWithoutAppointments =
//     await prisma.serviceOrderDetail.findMany({
//       where: { appointment: null },
//       include: {
//         order: {
//           include: {
//             customer: true, // Ch·ªâ c·∫ßn l·∫•y th√¥ng tin customer, kh√¥ng c·∫ßn l·ªìng qu√° nhi·ªÅu
//           },
//         },
//       },
//     });

//   // T·∫°o danh s√°ch l·ªãch h·∫πn t·ª´ c√°c ƒë∆°n h√†ng ch∆∞a c√≥ l·ªãch
//   const appointmentsData = await Promise.all(
//     orderDetailsWithoutAppointments.map(async (detail, index) => {
//       if (!detail.order || !detail.order.customer) {
//         console.warn(
//           `‚ö†Ô∏è B·ªè qua serviceOrderDetail ${detail.id} do kh√¥ng c√≥ order ho·∫∑c customer.`,
//         );
//         return null;
//       }

//       // L·∫•y ƒë·ªãa ch·ªâ c·ªßa kh√°ch h√†ng n·∫øu c√≥
//       const customerAddress = await prisma.userAddress.findFirst({
//         where: { user_id: detail.order.customer.id },
//       });

//       if (!customerAddress) {
//         console.warn(
//           `‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ kh√°ch h√†ng cho ƒë∆°n h√†ng ${detail.order.id}, b·ªè qua.`,
//         );
//         return null;
//       }

//       return {
//         order_detail_id: detail.id,
//         scheduled_date: new Date(
//           new Date().setDate(new Date().getDate() + (index % 7) + 1),
//         ),
//         scheduled_time: `${9 + (index % 8)}:00`,
//         status: 'pending',
//         customer_note: `Customer note for order ${detail.order.id}`,
//         employee_note: null,
//         customer_address: customerAddress?.id ?? null,
//       };
//     }),
//   );

//   // L·ªçc b·ªè c√°c ph·∫ßn t·ª≠ null tr∆∞·ªõc khi g·ªçi createMany()
//   const validAppointmentsData = appointmentsData.filter(
//     (a): a is NonNullable<typeof a> => a !== null,
//   );

//   await prisma.appointment.createMany({ data: validAppointmentsData });
//   console.log('‚úÖ Seeding completed successfully!');
// }
