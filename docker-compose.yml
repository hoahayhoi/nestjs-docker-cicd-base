version: '3.8'

services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    volumes:
      - /etc/letsencrypt/live/dev-api.eventhuit.io.vn/:/etc/letsencrypt/live/dev-api.eventhuit.io.vn/:ro
      - /etc/letsencrypt/archive/dev-api.eventhuit.io.vn/:/etc/letsencrypt/archive/dev-api.eventhuit.io.vn/:ro
    ports:
      - '80:80'
      - '443:443'
    depends_on:
      - app
    networks:
      - app-network
  app:
    image: myapp:${TAG:-latest}
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - APP_ENV=${APP_ENV:-production}
      - NODE_ENV=${NODE_ENV:-production}
    ports:
      - '${APP_PORT:-80}:${APP_PORT:-80}'
    depends_on:
      - postgres
      - redis
    networks:
      - app-network

  postgres:
    image: postgres:15
    env_file:
      - .env.development
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - '${DB_PORT:-5432}:5432'
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER} -d ${DB_NAME}']
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6
    ports:
      - '${REDIS_PORT:-6379}:6379'
    volumes:
      - redis-data:/data
    networks:
      - app-network
    command: redis-server --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 3s
      retries: 5

volumes:
  postgres-data:
  redis-data:

networks:
  app-network:
    driver: bridge
